package com.mycompany.bookedmoneyx.client;

import javax.swing.JFrame;
import com.mycompany.bookedmoneyx.client.Account_class;
import com.mycompany.bookedmoneyx.client.AccountList_class;
import com.mycompany.bookedmoneyx.client.Category_class;
import com.mycompany.bookedmoneyx.client.Data_class;
import com.mycompany.bookedmoneyx.client.HibernateUtil_class;
import com.mycompany.bookedmoneyx.client.IfrmMain;
import javax.swing.JOptionPane;

public class frmOperation_class extends javax.swing.JFrame {

    /**
     * Creates new form frmOperation_class
     */
    public frmOperation_class() {
        initComponents();
		Init();
    }
    
    public frmOperation_class(javax.swing.JFrame _frmMain, IfrmMain _frmMainInterface, Data_class data,
			HibernateUtil_class hibernateUtil) {
        initComponents();
        frmMain = _frmMain;
		frmMainInterface = _frmMainInterface;
		Data = data;
		HibernateUtil = hibernateUtil;
		Init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_OK = new javax.swing.JButton();
        jButton_Cancel = new javax.swing.JButton();
        jComboBox_Category = new javax.swing.JComboBox<>();
        jComboBox_Subcategory = new javax.swing.JComboBox<>();
        jLabel_Category = new javax.swing.JLabel();
        jLabel_Subcategory = new javax.swing.JLabel();
        jLabel_Description = new javax.swing.JLabel();
        jTextField_Description = new javax.swing.JTextField();
        jLabel_Amount = new javax.swing.JLabel();
        jTextField_Amount = new javax.swing.JTextField();
        jLabel_DateTime = new javax.swing.JLabel();
        jTextField_DateTime = new javax.swing.JTextField();
        jRadioButton_Incoming = new javax.swing.JRadioButton();
        jRadioButton_Cost = new javax.swing.JRadioButton();
        jLabel_AccountOutgoing = new javax.swing.JLabel();
        jComboBox_AccountOutgoing = new javax.swing.JComboBox<>();
        jLabel_ID = new javax.swing.JLabel();
        jTextField_ID = new javax.swing.JTextField();
        jComboBox_Type = new javax.swing.JComboBox<>();
        jLabel_Type = new javax.swing.JLabel();
        jLabel_AccountIncoming = new javax.swing.JLabel();
        jComboBox_AccountIncoming = new javax.swing.JComboBox<>();

        setLocation(new java.awt.Point(0, 0));
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButton_OK.setText("OK");
        jButton_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OKActionPerformed(evt);
            }
        });

        jButton_Cancel.setText("Отмена");
        jButton_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelActionPerformed(evt);
            }
        });

        jComboBox_Category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_CategoryActionPerformed(evt);
            }
        });

        jLabel_Category.setText("Категория");

        jLabel_Subcategory.setText("Подкатегория");

        jLabel_Description.setText("Описание");

        jTextField_Description.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel_Amount.setText("Сумма");

        jTextField_Amount.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel_DateTime.setText("Дата");

        jTextField_DateTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jRadioButton_Incoming.setText("Приход");
        jRadioButton_Incoming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_IncomingActionPerformed(evt);
            }
        });

        jRadioButton_Cost.setText("Расход");
        jRadioButton_Cost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_CostActionPerformed(evt);
            }
        });

        jLabel_AccountOutgoing.setText("Счёт списания");

        jLabel_ID.setText("ID");

        jTextField_ID.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jComboBox_Type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_TypeActionPerformed(evt);
            }
        });

        jLabel_Type.setText("Тип");

        jLabel_AccountIncoming.setText("Счёт зачисления");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Description)
                            .addComponent(jLabel_Amount)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel_Category)
                                .addGap(12, 12, 12)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jComboBox_Category, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel_Subcategory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_Subcategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jTextField_Amount, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(jLabel_DateTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_DateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField_Description, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(22, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_ID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_AccountIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox_AccountIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel_AccountOutgoing, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_AccountOutgoing, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jRadioButton_Incoming)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioButton_Cost)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel_Type)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jButton_OK, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_ID)
                    .addComponent(jTextField_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton_Incoming)
                    .addComponent(jRadioButton_Cost)
                    .addComponent(jComboBox_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Type))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_AccountOutgoing)
                        .addComponent(jComboBox_AccountOutgoing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox_AccountIncoming, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel_AccountIncoming))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Category)
                    .addComponent(jLabel_Subcategory)
                    .addComponent(jComboBox_Subcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_Category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Description)
                    .addComponent(jTextField_Description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Amount)
                    .addComponent(jTextField_Amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_DateTime)
                    .addComponent(jTextField_DateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_OK)
                    .addComponent(jButton_Cancel))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        DoExit(false);
    }//GEN-LAST:event_formWindowClosing

    private void jButton_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelActionPerformed
		DoExit(false);
    }//GEN-LAST:event_jButton_CancelActionPerformed

    private void jButton_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OKActionPerformed
        if(CheckForSave())
			DoExit(true);
    }//GEN-LAST:event_jButton_OKActionPerformed

    private void jRadioButton_IncomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_IncomingActionPerformed
        if(jRadioButton_Incoming.isSelected()){
			jRadioButton_Cost.setSelected(false);
			jComboBox_AccountIncoming.setEnabled(true);
			jComboBox_AccountOutgoing.setEnabled(false);
		}
		else{
			jRadioButton_Incoming.setSelected(true);
			jComboBox_AccountIncoming.setEnabled(true);
			jComboBox_AccountOutgoing.setEnabled(false);
		}
		loadCategories(jRadioButton_Incoming.isSelected());
    }//GEN-LAST:event_jRadioButton_IncomingActionPerformed

    private void jRadioButton_CostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_CostActionPerformed
        if(jRadioButton_Cost.isSelected()){
			jRadioButton_Incoming.setSelected(false);
			jComboBox_AccountIncoming.setEnabled(false);
			jComboBox_AccountOutgoing.setEnabled(true);
		}
		else{
			jRadioButton_Cost.setSelected(true);
			jComboBox_AccountIncoming.setEnabled(false);
			jComboBox_AccountOutgoing.setEnabled(true);
		}
		loadCategories(jRadioButton_Incoming.isSelected());
    }//GEN-LAST:event_jRadioButton_CostActionPerformed

    private void jComboBox_CategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_CategoryActionPerformed
        if(jComboBox_Category.getSelectedItem() != null)
			loadSubcategories(jComboBox_Category.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBox_CategoryActionPerformed

    private void jComboBox_TypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_TypeActionPerformed
		if(jComboBox_Type.getSelectedIndex() == 0){
			jRadioButton_Incoming.setEnabled(true);
			jRadioButton_Cost.setEnabled(true);
			jComboBox_Category.setEnabled(true);
			jComboBox_Subcategory.setEnabled(true);
			if(jRadioButton_Incoming.isSelected()){
				jComboBox_AccountIncoming.setEnabled(true);
				jComboBox_AccountOutgoing.setEnabled(false);
			}
			else{
				jComboBox_AccountIncoming.setEnabled(false);
				jComboBox_AccountOutgoing.setEnabled(true);
			}
		}
		else{
			jRadioButton_Incoming.setEnabled(false);
			jRadioButton_Cost.setEnabled(false);
			jComboBox_Category.setEnabled(false);
			jComboBox_Subcategory.setEnabled(false);
			jComboBox_AccountIncoming.setEnabled(true);
			jComboBox_AccountOutgoing.setEnabled(true);
		}
    }//GEN-LAST:event_jComboBox_TypeActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(frmOperation_class.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(frmOperation_class.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(frmOperation_class.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(frmOperation_class.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new frmOperation_class().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Cancel;
    private javax.swing.JButton jButton_OK;
    private javax.swing.JComboBox<String> jComboBox_AccountIncoming;
    private javax.swing.JComboBox<String> jComboBox_AccountOutgoing;
    private javax.swing.JComboBox<String> jComboBox_Category;
    private javax.swing.JComboBox<String> jComboBox_Subcategory;
    private javax.swing.JComboBox<String> jComboBox_Type;
    private javax.swing.JLabel jLabel_AccountIncoming;
    private javax.swing.JLabel jLabel_AccountOutgoing;
    private javax.swing.JLabel jLabel_Amount;
    private javax.swing.JLabel jLabel_Category;
    private javax.swing.JLabel jLabel_DateTime;
    private javax.swing.JLabel jLabel_Description;
    private javax.swing.JLabel jLabel_ID;
    private javax.swing.JLabel jLabel_Subcategory;
    private javax.swing.JLabel jLabel_Type;
    private javax.swing.JRadioButton jRadioButton_Cost;
    private javax.swing.JRadioButton jRadioButton_Incoming;
    private javax.swing.JTextField jTextField_Amount;
    private javax.swing.JTextField jTextField_DateTime;
    private javax.swing.JTextField jTextField_Description;
    private javax.swing.JTextField jTextField_ID;
    // End of variables declaration//GEN-END:variables

    private boolean ModeEdit;					//  false - добавление, true - редактирование
	private long DefaultAccountIncomingID;		//	ID счёта зачисления (по умолчанию)
	private long DefaultAccountOutgoingID;		//	ID счёта списания (по умолчанию)
	private boolean DefaultOperationType;		//	Тип операции по умолчанию: true - приход, false - расход
    private javax.swing.JFrame frmMain;
	private IfrmMain frmMainInterface;
	private AccountList_class Accounts;
	private Account_class AccountIncomingSelected;
	private Account_class AccountOutgoingSelected;
	private Data_class Data;
	private HibernateUtil_class HibernateUtil;

	private void Init(){
		DefaultOperationType = false;
		SetKeyBindings();
		jComboBox_Type.addItem("Приход / расход");
		jComboBox_Type.addItem("Перевод");
	}
		
	public void loadAccounts(AccountList_class list){
		jComboBox_AccountIncoming.removeAllItems();
		jComboBox_AccountOutgoing.removeAllItems();
		if(list == null)
			return;
		Accounts = list;
		for(int i = 0; i < list.size(); i++){
			jComboBox_AccountIncoming.addItem(list.getItem(i).getName());
			jComboBox_AccountOutgoing.addItem(list.getItem(i).getName());
		}
	}
	
	public void loadCategories(boolean isIncoming){
		jComboBox_Category.removeAllItems();
		jComboBox_Subcategory.removeAllItems();
		java.util.ArrayList<Category_class> list;
		list = Data.Categories.selectParentCategories();
		if(list == null){
			System.err.println("ParentCategories is NULL");
			return;
		}
		for(Category_class item : list)
			if(item.getIsIncoming() == isIncoming)
				jComboBox_Category.addItem(item.getName());
		if(list.size() > 0)
			loadSubcategories(jComboBox_Category.getSelectedItem().toString());
	}
	
	public void loadSubcategories(String nameParentCategory){
		java.util.ArrayList<Category_class> list;
		jComboBox_Subcategory.removeAllItems();
		jComboBox_Subcategory.addItem("");
		list = Data.Categories.selectByParentName(nameParentCategory);
		if(list == null){
			return;
		}
		for(Category_class item : list)
			jComboBox_Subcategory.addItem(item.getName());
	}

	public long DefaultAccountIncomingID() {
		return DefaultAccountIncomingID;
	}
	
	public long getDefaultAccountOutgoingID() {
		return DefaultAccountOutgoingID;
	}
		
	public void setDefaultAccountsID(long accountIncomingID, long accountOutgoingID){
		DefaultAccountIncomingID = accountIncomingID;
		DefaultAccountOutgoingID = accountOutgoingID;
		if(Accounts != null){
			AccountIncomingSelected = Accounts.getItem_byID(accountIncomingID);
			AccountOutgoingSelected = Accounts.getItem_byID(accountOutgoingID);
		}
	}

	public boolean getDefaultOperationType() {
		return DefaultOperationType;
	}

	public void setDefaultOperationType(boolean isComing){
		DefaultOperationType = isComing;
	}
	    
    public int showForm(boolean modeEdit, long id){
        if(this.isVisible())
            return 0;
		
		Operation_class operation = null;
		if(modeEdit){
			operation = Data.Operations.getItem_byID(id);
			if(operation == null)
				return 1;
		}
            
        ModeEdit = modeEdit;
		jTextField_ID.setEditable(false);
		jTextField_Amount.setBackground(java.awt.Color.white);
		jTextField_DateTime.setBackground(java.awt.Color.white);
		jComboBox_AccountIncoming.setBackground(java.awt.Color.white);
		jComboBox_AccountOutgoing.setBackground(java.awt.Color.white);
		jTextField_Amount.setText("");
		
		if(Data.Accounts.size() <= 0){
			Object[] options = { "Да"};
			javax.swing.JOptionPane.showOptionDialog(null, "Список счетов пуст. Для корректной работы необходимо добавить хотя бы один!\nЭто делается в окне настроек.", "Внимание",
			javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE, null, options, options[0]);
			return 2;
		}
		
		if(Data.Categories.size() <= 0){
			Object[] options = { "Да"};
			javax.swing.JOptionPane.showOptionDialog(null, "Список категорий пуст. Для корректной работы необходимо добавить хотя бы одну!\nЭто делается в окне настроек.", "Внимание",
			javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE, null, options, options[0]);
			return 3;
		}
		
		loadAccounts(Data.Accounts);
		setDefaultAccountsID(Data.getDefaultAccountIncomingID(), Data.getDefaultAccountOutgoingID());
		setDefaultOperationType(Data.getDefaultOperationType());
				
        if(!modeEdit){
            this.setTitle("Добавление операции");
			jTextField_ID.setText(Long.toString(Data.Operations.getLastID() + 1));
			jComboBox_Type.setSelectedIndex(0);
			jRadioButton_Incoming.setEnabled(true);
			jRadioButton_Cost.setEnabled(true);
			jComboBox_Category.setEnabled(true);
			jComboBox_Subcategory.setEnabled(true);
			jTextField_Description.setText("");
			//java.util.Date date = Func.parseDate(Func.toString_Date(new java.util.Date()));
			java.util.Date date = Func.parseDate(Func.toString_Date(Data.getPeriodBegin()));
			jTextField_DateTime.setText(Func.toString_Date(date));
			if(DefaultOperationType)
				jRadioButton_Incoming.doClick();
			else
				jRadioButton_Cost.doClick();
			
			if(AccountIncomingSelected == null){
				if(jComboBox_AccountIncoming.getItemCount() > 0)
					jComboBox_AccountIncoming.setSelectedIndex(0);
			}
			else{
				boolean f = false;
				for(int i = 0; i < jComboBox_AccountIncoming.getItemCount(); i++)
					if(jComboBox_AccountIncoming.getItemAt(i).toString().compareTo(AccountIncomingSelected.getName()) == 0){
						jComboBox_AccountIncoming.setSelectedIndex(i);
						f = true;
						break;
					}
				if(!f)
					if(jComboBox_AccountIncoming.getItemCount() > 0)
						jComboBox_AccountIncoming.setSelectedIndex(0);
			}
			
			if(AccountOutgoingSelected == null){
				if(jComboBox_AccountOutgoing.getItemCount() > 0)
					jComboBox_AccountOutgoing.setSelectedIndex(0);
			}
			else{
				boolean f = false;
				for(int i = 0; i < jComboBox_AccountOutgoing.getItemCount(); i++)
					if(jComboBox_AccountOutgoing.getItemAt(i).toString().compareTo(AccountOutgoingSelected.getName()) == 0){
						jComboBox_AccountOutgoing.setSelectedIndex(i);
						f = true;
						break;
					}
				if(!f)
					if(jComboBox_AccountOutgoing.getItemCount() > 0)
						jComboBox_AccountOutgoing.setSelectedIndex(0);
			}
			loadCategories(jRadioButton_Incoming.isSelected());
			jTextField_Amount.requestFocus();
        }
		else{
            this.setTitle("Редактирование операции");
			jTextField_ID.setText(Long.toString(operation.getID()));
			jComboBox_Type.setSelectedIndex(operation.getType());
			if(operation.getType() == 0){
				jRadioButton_Incoming.setEnabled(true);
				jRadioButton_Cost.setEnabled(true);
				jComboBox_Category.setEnabled(true);
				jComboBox_Subcategory.setEnabled(true);
				if(operation.getIsIncoming()){
					jRadioButton_Incoming.doClick();
					Account_class account = Data.Accounts.getItem_byID(operation.getAccountIncomingID());
					if(account == null){
						return 4;
					}
					else{
						boolean f = false;
						for(int i = 0; i < jComboBox_AccountIncoming.getItemCount(); i++)
							if(jComboBox_AccountIncoming.getItemAt(i).toString().compareTo(account.getName()) == 0){
								jComboBox_AccountIncoming.setSelectedIndex(i);
								f = true;
								break;
							}
						if(!f){
							return 5;
						}
					}
				}
				else{
					jRadioButton_Cost.doClick();
					Account_class account = Data.Accounts.getItem_byID(operation.getAccountOutgoingID());
					if(account == null){
						return 6;
					}
					else{
						boolean f = false;
						for(int i = 0; i < jComboBox_AccountOutgoing.getItemCount(); i++)
							if(jComboBox_AccountOutgoing.getItemAt(i).toString().compareTo(account.getName()) == 0){
								jComboBox_AccountOutgoing.setSelectedIndex(i);
								f = true;
								break;
							}
						if(!f){
							return 7;
						}
					}
				}
				
				//	Категория
				Category_class category = Data.Categories.getItem_byID(operation.getCategoryID());
				if(category == null)
					return 8;
				boolean f;
				loadCategories(category.getIsIncoming());
				if(category.isParent()){
					f = false;
					for(int i = 0; i < jComboBox_Category.getItemCount(); i++)
					if(jComboBox_Category.getItemAt(i).toString().compareTo(category.getName()) == 0){
						jComboBox_Category.setSelectedIndex(i);
						f = true;
						break;
					}
					if(!f)
						return 9;
				}
				else{
					f = false;
					for(int i = 0; i < jComboBox_Category.getItemCount(); i++)
					if(jComboBox_Category.getItemAt(i).toString().compareTo(category.getNameParent()) == 0){
						jComboBox_Category.setSelectedIndex(i);
						f = true;
						break;
					}
					if(!f)
						return 10;
					
					f = false;
					for(int i = 0; i < jComboBox_Subcategory.getItemCount(); i++)
						if(jComboBox_Subcategory.getItemAt(i).toString().compareTo(category.getName()) == 0){
							jComboBox_Subcategory.setSelectedIndex(i);
							f = true;
							break;
						}
					if(!f)
						return 11;
				}
			}
			else{
				jRadioButton_Incoming.setEnabled(false);
				jRadioButton_Cost.setEnabled(false);
				jComboBox_Category.setEnabled(false);
				jComboBox_Subcategory.setEnabled(false);
				jComboBox_AccountIncoming.setEnabled(true);
				jComboBox_AccountOutgoing.setEnabled(true);
				Account_class account = Data.Accounts.getItem_byID(operation.getAccountIncomingID());
				if(account == null){
					return 12;
				}
				else{
					boolean f = false;
					for(int i = 0; i < jComboBox_AccountIncoming.getItemCount(); i++)
						if(jComboBox_AccountIncoming.getItemAt(i).toString().compareTo(account.getName()) == 0){
							jComboBox_AccountIncoming.setSelectedIndex(i);
							f = true;
							break;
						}
					if(!f){
						return 13;
					}
				}
				
				account = Data.Accounts.getItem_byID(operation.getAccountOutgoingID());
				if(account == null){
					return 14;
				}
				else{
					boolean f = false;
					for(int i = 0; i < jComboBox_AccountOutgoing.getItemCount(); i++)
						if(jComboBox_AccountOutgoing.getItemAt(i).toString().compareTo(account.getName()) == 0){
							jComboBox_AccountOutgoing.setSelectedIndex(i);
							f = true;
							break;
						}
					if(!f){
						return 15;
					}
				}
			}
			jTextField_Description.setText(operation.getDescription());
			jTextField_DateTime.setText(Func.toString_Date(operation.getDateTime()));
			jTextField_Amount.setText(Double.toString(operation.getAmount()));
        }
        this.setVisible(true);
        frmMain.setEnabled(false);
        return 0;
    }
	
	private void SetKeyBindings(){
		javax.swing.InputMap inputMap = getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW);
		javax.swing.ActionMap actionMap = getRootPane().getActionMap();
		inputMap.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0, false), "Pressed.ESC");
		inputMap.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0, false), "Pressed.ENTER");

		actionMap.put("Pressed.ESC", new javax.swing.AbstractAction() {
			@Override public void actionPerformed(java.awt.event.ActionEvent e) {
				DoExit(false);
			}
		});
		
		actionMap.put("Pressed.ENTER", new javax.swing.AbstractAction() {
			@Override public void actionPerformed(java.awt.event.ActionEvent e) {
				boolean f = CheckForSave();
				if(f)
					DoExit(true);
			}
		});		
	}
	
	private void DoExit(boolean save){
		if(save){
			Operation_class operation = new Operation_class();
			long id;
			operation.setID(Func.parseLong(jTextField_ID.getText()));	
			operation.setType(jComboBox_Type.getSelectedIndex());
			if(operation.getType() == 0){
				operation.setIsIncoming(jRadioButton_Incoming.isSelected());
				if(operation.getIsIncoming()){
					id = Data.Accounts.getID_byName(jComboBox_AccountIncoming.getSelectedItem().toString());
					operation.setAccountIncomingID(id);
				}
				else{
					id = Data.Accounts.getID_byName(jComboBox_AccountOutgoing.getSelectedItem().toString());
					operation.setAccountOutgoingID(id);
				}

				if(jComboBox_Subcategory.getSelectedIndex() == 0)
					operation.setCategoryID(Data.Categories.getItem_byName(jComboBox_Category.getSelectedItem().toString()).getID());
				else
					operation.setCategoryID(Data.Categories.getItem_byName(jComboBox_Subcategory.getSelectedItem().toString(), jComboBox_Category.getSelectedItem().toString()).getID());
				operation.setDescription(jTextField_Description.getText());
				operation.setAmount(Func.parseDouble(jTextField_Amount.getText()).doubleValue());
				operation.setDateTime(Func.parseDate(jTextField_DateTime.getText()));
			}
			else
				if(operation.getType() == 1){
					id = Data.Accounts.getID_byName(jComboBox_AccountIncoming.getSelectedItem().toString());
					operation.setAccountIncomingID(id);
					id = Data.Accounts.getID_byName(jComboBox_AccountOutgoing.getSelectedItem().toString());
					operation.setAccountOutgoingID(id);
					operation.setDescription(jTextField_Description.getText());
					operation.setAmount(Func.parseDouble(jTextField_Amount.getText()).doubleValue());
					operation.setDateTime(Func.parseDate(jTextField_DateTime.getText()));
				}
			if(!ModeEdit){
				if(Data.getStoreDataMode() > 0){
					Data.Operations.addItem(operation);
					if(frmMainInterface.InitHibernate())
						HibernateUtil.add(operation);
				}
				else
					Data.Operations.addItem_byLastID(operation);
			}
			else{
				Data.Operations.setItem_byID(operation.getID(), operation);
				if(Data.getStoreDataMode() > 0)
					if(frmMainInterface.InitHibernate())
						HibernateUtil.updateOperation(operation.getID(), operation);
			}
			frmMainInterface.ShowData();
		}
		frmMain.setEnabled(true);
		this.setVisible(false);
	}
	
	//	Проверяет значения на корректность заполнения
	private boolean CheckForSave(){
		boolean error = false;
		Double D = Func.parseDouble(jTextField_Amount.getText());
		java.util.Date date;
		
		jTextField_Amount.setBackground(java.awt.Color.white);
		jTextField_DateTime.setBackground(java.awt.Color.white);
		jComboBox_AccountIncoming.setBackground(java.awt.Color.white);
		jComboBox_AccountOutgoing.setBackground(java.awt.Color.white);
		
		if(D == null){
			jTextField_Amount.setBackground(java.awt.Color.orange);
			error = true;
		}
		
		date = Func.parseDate(jTextField_DateTime.getText());
		if(date == null){
			jTextField_DateTime.setBackground(java.awt.Color.orange);
			error = true;
		}

		
		if(jComboBox_Type.getSelectedIndex() == 1){
			if(jComboBox_AccountIncoming.getSelectedIndex() == jComboBox_AccountOutgoing.getSelectedIndex()){
				jComboBox_AccountIncoming.setBackground(java.awt.Color.orange);
				jComboBox_AccountOutgoing.setBackground(java.awt.Color.orange);
				error = true;
			}
		}
		return !error;
	}
}
