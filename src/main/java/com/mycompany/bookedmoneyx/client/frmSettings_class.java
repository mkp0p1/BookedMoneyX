package com.mycompany.bookedmoneyx.client;
import javax.swing.JFrame;
import java.awt.Color;
import java.util.List;
import com.mycompany.bookedmoneyx.client.Account_class;
import com.mycompany.bookedmoneyx.client.AccountList_class;
import com.mycompany.bookedmoneyx.client.Category_class;
import com.mycompany.bookedmoneyx.client.Data_class;
import com.mycompany.bookedmoneyx.client.HibernateUtil_class;
import com.mycompany.bookedmoneyx.client.IfrmMain;
import javax.swing.JOptionPane;

public class frmSettings_class extends javax.swing.JFrame {

    /**
     * Creates new form frmSettings
     */
    public frmSettings_class() {
        initComponents();
		Init();
    }
	
	public frmSettings_class(javax.swing.JFrame _frmMain, IfrmMain _frmMainInterface, Data_class data,
			HibernateUtil_class hibernateUtil) {
        initComponents();
		frmMain = _frmMain;
		frmMainInterface = _frmMainInterface;
		Data = data;
		HibernateUtil = hibernateUtil;
		Init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_OK = new javax.swing.JButton();
        jButton_Cancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_Accounts = new javax.swing.JList<>();
        jLabel_Accounts = new javax.swing.JLabel();
        jButton_Accounts_Add = new javax.swing.JButton();
        jTextField_Accounts_Name = new javax.swing.JTextField();
        jButton_Accounts_Edit = new javax.swing.JButton();
        jButton_Accounts_Delete = new javax.swing.JButton();
        jLabel_Accounts_Name = new javax.swing.JLabel();
        jLabel_Accounts_Balance = new javax.swing.JLabel();
        jTextField_Accounts_Balance = new javax.swing.JTextField();
        jLabel_Categories = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_Categories = new javax.swing.JList<>();
        jTextField_Categories_Name = new javax.swing.JTextField();
        jRadioButton_Categories_IsIncoming = new javax.swing.JRadioButton();
        jRadioButton_Categories_IsCost = new javax.swing.JRadioButton();
        jButton_Categories_Add = new javax.swing.JButton();
        jButton_Categories_Delete = new javax.swing.JButton();
        jButton_Categories_Edit = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList_Subcategories = new javax.swing.JList<>();
        jCheckBox_Accounts_Incoming = new javax.swing.JCheckBox();
        jCheckBox_Accounts_Outgoing = new javax.swing.JCheckBox();
        jLabel_SQL_Hostname = new javax.swing.JLabel();
        jLabel_SQL_Username = new javax.swing.JLabel();
        jLabel_SQL_Password = new javax.swing.JLabel();
        jLabel_SQL_DB = new javax.swing.JLabel();
        jTextField_SQL_Hostname = new javax.swing.JTextField();
        jTextField_SQL_Username = new javax.swing.JTextField();
        jPasswordField_SQL_Password = new javax.swing.JPasswordField();
        jTextField_SQL_DB = new javax.swing.JTextField();
        jLabel_SQL = new javax.swing.JLabel();
        jButton_Subcategories_Add = new javax.swing.JButton();
        jButton_Subcategories_Delete = new javax.swing.JButton();
        jTextField_Subcategories_Name = new javax.swing.JTextField();
        jLabel_Subcategories = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel_DefaultOperationType = new javax.swing.JLabel();
        jRadioButton_DefaultOperation_IsIncoming = new javax.swing.JRadioButton();
        jRadioButton_DefaultOperation_IsCost = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel_Accounts_Default = new javax.swing.JLabel();
        jButton_Subcategories_Edit = new javax.swing.JButton();
        jButton_SQL_Apply = new javax.swing.JButton();
        jButton_SQL_Return = new javax.swing.JButton();
        jLabel_SQL_Port = new javax.swing.JLabel();
        jTextField_SQL_Port = new javax.swing.JTextField();
        jLabel_StoreData = new javax.swing.JLabel();
        jRadioButton_StoreData_File = new javax.swing.JRadioButton();
        jRadioButton_StoreData_DB = new javax.swing.JRadioButton();
        jRadioButton_StoreData_FileAndDb = new javax.swing.JRadioButton();

        setTitle("Настройки");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButton_OK.setText("OK");
        jButton_OK.setNextFocusableComponent(jButton_Cancel);
        jButton_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OKActionPerformed(evt);
            }
        });

        jButton_Cancel.setText("Отмена");
        jButton_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelActionPerformed(evt);
            }
        });

        jList_Accounts.setModel(new javax.swing.DefaultListModel());
        jList_Accounts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList_Accounts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_AccountsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList_Accounts);

        jLabel_Accounts.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel_Accounts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Accounts.setText("Счета");

        jButton_Accounts_Add.setText("Добавить");
        jButton_Accounts_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Accounts_AddActionPerformed(evt);
            }
        });

        jButton_Accounts_Edit.setText("Изменить");
        jButton_Accounts_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Accounts_EditActionPerformed(evt);
            }
        });

        jButton_Accounts_Delete.setText("Удалить");
        jButton_Accounts_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Accounts_DeleteActionPerformed(evt);
            }
        });

        jLabel_Accounts_Name.setText("Название");

        jLabel_Accounts_Balance.setText("Начальный баланс");

        jLabel_Categories.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel_Categories.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Categories.setText("Категории");

        jList_Categories.setModel(new javax.swing.DefaultListModel());
        jList_Categories.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList_Categories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_CategoriesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList_Categories);

        jRadioButton_Categories_IsIncoming.setText("Приходная");
        jRadioButton_Categories_IsIncoming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_Categories_IsIncomingActionPerformed(evt);
            }
        });

        jRadioButton_Categories_IsCost.setText("Расходная");
        jRadioButton_Categories_IsCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_Categories_IsCostActionPerformed(evt);
            }
        });

        jButton_Categories_Add.setText("Добавить");
        jButton_Categories_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Categories_AddActionPerformed(evt);
            }
        });

        jButton_Categories_Delete.setText("Удалить");
        jButton_Categories_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Categories_DeleteActionPerformed(evt);
            }
        });

        jButton_Categories_Edit.setText("Изменить");
        jButton_Categories_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Categories_EditActionPerformed(evt);
            }
        });

        jList_Subcategories.setModel(new javax.swing.DefaultListModel());
        jList_Subcategories.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList_Subcategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_SubcategoriesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList_Subcategories);

        jCheckBox_Accounts_Incoming.setText("Приход");
        jCheckBox_Accounts_Incoming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Accounts_IncomingActionPerformed(evt);
            }
        });

        jCheckBox_Accounts_Outgoing.setText("Расход");
        jCheckBox_Accounts_Outgoing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_Accounts_OutgoingActionPerformed(evt);
            }
        });

        jLabel_SQL_Hostname.setText("Hostname");
        jLabel_SQL_Hostname.setPreferredSize(new java.awt.Dimension(68, 16));

        jLabel_SQL_Username.setText("Username");
        jLabel_SQL_Username.setPreferredSize(new java.awt.Dimension(68, 16));

        jLabel_SQL_Password.setText("Password");
        jLabel_SQL_Password.setPreferredSize(new java.awt.Dimension(68, 16));

        jLabel_SQL_DB.setText("База данных");

        jTextField_SQL_Hostname.setNextFocusableComponent(jTextField_SQL_Port);

        jTextField_SQL_Username.setNextFocusableComponent(jPasswordField_SQL_Password);

        jPasswordField_SQL_Password.setNextFocusableComponent(jButton_SQL_Apply);

        jTextField_SQL_DB.setNextFocusableComponent(jLabel_SQL_Username);

        jLabel_SQL.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel_SQL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_SQL.setText("Подключение к базе данных SQL");

        jButton_Subcategories_Add.setText("Добавить");
        jButton_Subcategories_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Subcategories_AddActionPerformed(evt);
            }
        });

        jButton_Subcategories_Delete.setText("Удалить");
        jButton_Subcategories_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Subcategories_DeleteActionPerformed(evt);
            }
        });

        jLabel_Subcategories.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel_Subcategories.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Subcategories.setText("Подкатегории");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel_DefaultOperationType.setText("Операция по умолчанию (при создании)");

        jRadioButton_DefaultOperation_IsIncoming.setText("Приход");
        jRadioButton_DefaultOperation_IsIncoming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_DefaultOperation_IsIncomingActionPerformed(evt);
            }
        });

        jRadioButton_DefaultOperation_IsCost.setText("Расход");
        jRadioButton_DefaultOperation_IsCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_DefaultOperation_IsCostActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel_Accounts_Default.setText("По умолчанию");

        jButton_Subcategories_Edit.setText("Изменить");
        jButton_Subcategories_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Subcategories_EditActionPerformed(evt);
            }
        });

        jButton_SQL_Apply.setText("Принять");
        jButton_SQL_Apply.setNextFocusableComponent(jButton_SQL_Return);
        jButton_SQL_Apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SQL_ApplyActionPerformed(evt);
            }
        });

        jButton_SQL_Return.setText("Вернуть");
        jButton_SQL_Return.setNextFocusableComponent(jRadioButton_StoreData_File);
        jButton_SQL_Return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SQL_ReturnActionPerformed(evt);
            }
        });

        jLabel_SQL_Port.setText("Порт");

        jTextField_SQL_Port.setNextFocusableComponent(jLabel_SQL_DB);

        jLabel_StoreData.setText("Хранение данных");

        jRadioButton_StoreData_File.setText("Файл");
        jRadioButton_StoreData_File.setNextFocusableComponent(jRadioButton_StoreData_DB);
        jRadioButton_StoreData_File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_StoreData_FileActionPerformed(evt);
            }
        });

        jRadioButton_StoreData_DB.setText("База данных");
        jRadioButton_StoreData_DB.setNextFocusableComponent(jRadioButton_StoreData_FileAndDb);
        jRadioButton_StoreData_DB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_StoreData_DBActionPerformed(evt);
            }
        });

        jRadioButton_StoreData_FileAndDb.setText("Файл и база данных");
        jRadioButton_StoreData_FileAndDb.setNextFocusableComponent(jButton_OK);
        jRadioButton_StoreData_FileAndDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_StoreData_FileAndDbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton_Accounts_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton_Accounts_Delete, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jCheckBox_Accounts_Outgoing, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCheckBox_Accounts_Incoming, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel_Accounts_Default, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton_Accounts_Edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_Accounts, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_Accounts_Balance, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField_Accounts_Balance, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel_Accounts_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addComponent(jTextField_Accounts_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 96, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jLabel_Categories))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton_Categories_IsIncoming)
                            .addComponent(jRadioButton_Categories_IsCost)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton_Categories_Add, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_Categories_Delete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_Categories_Edit, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jTextField_Categories_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel_Subcategories)
                                .addGap(45, 45, 45))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton_Subcategories_Edit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                    .addComponent(jButton_Subcategories_Add, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField_Subcategories_Name)
                                    .addComponent(jButton_Subcategories_Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_SQL, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel_SQL_DB)
                                    .addComponent(jLabel_SQL_Port, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel_SQL_Hostname, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                                    .addComponent(jLabel_SQL_Username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel_SQL_Password, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField_SQL_Username)
                                    .addComponent(jPasswordField_SQL_Password)
                                    .addComponent(jTextField_SQL_DB)
                                    .addComponent(jTextField_SQL_Port)
                                    .addComponent(jTextField_SQL_Hostname, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButton_SQL_Apply)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_SQL_Return)))
                        .addGap(20, 20, 20)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton_OK, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel_StoreData))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton_StoreData_DB)
                                            .addComponent(jRadioButton_StoreData_File)
                                            .addComponent(jRadioButton_StoreData_FileAndDb))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_DefaultOperationType)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(jRadioButton_DefaultOperation_IsIncoming)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButton_DefaultOperation_IsCost)))
                                .addGap(49, 49, 49))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_Accounts)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_Accounts_Add)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Accounts_Edit)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Accounts_Delete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel_Accounts_Default)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox_Accounts_Incoming)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox_Accounts_Outgoing))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_Accounts_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_Accounts_Name))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_Accounts_Balance)
                            .addComponent(jTextField_Accounts_Balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_Categories)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField_Categories_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton_Categories_IsIncoming)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton_Categories_IsCost)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Categories_Add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton_Categories_Edit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton_Categories_Delete))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_Subcategories)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField_Subcategories_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jButton_Subcategories_Add)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Subcategories_Edit)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Subcategories_Delete))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_SQL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_SQL_Hostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_SQL_Hostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_SQL_Port)
                            .addComponent(jTextField_SQL_Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_SQL_DB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_SQL_DB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_SQL_Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_SQL_Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPasswordField_SQL_Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_SQL_Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_DefaultOperationType)
                            .addComponent(jLabel_StoreData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton_DefaultOperation_IsIncoming)
                            .addComponent(jRadioButton_DefaultOperation_IsCost)
                            .addComponent(jRadioButton_StoreData_File))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton_StoreData_DB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton_StoreData_FileAndDb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_Cancel)
                            .addComponent(jButton_OK)))
                    .addComponent(jSeparator3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_SQL_Apply)
                            .addComponent(jButton_SQL_Return))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelActionPerformed
        DoExit(false);
    }//GEN-LAST:event_jButton_CancelActionPerformed

    private void jButton_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OKActionPerformed
		boolean b;
		if(DataBuffer.getStoreDataMode() > 0)
			b = CheckForSave(true);
		else
			b = CheckForSave(false);
		
		if(b)
			DoExit(true);
    }//GEN-LAST:event_jButton_OKActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		DoExit(false);
    }//GEN-LAST:event_formWindowClosing

    private void jList_AccountsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_AccountsMouseClicked
		if(DataBuffer.Accounts.getItem(jList_Accounts.getSelectedIndex()) == null)
			return;
		ShowAccounts();
    }//GEN-LAST:event_jList_AccountsMouseClicked

    private void jButton_Accounts_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Accounts_AddActionPerformed
        if(jTextField_Accounts_Name.getText().isEmpty())
			return;
		Double d = Func.parseDouble(jTextField_Accounts_Balance.getText());
		if(d == null){
			jTextField_Accounts_Balance.setBackground(Color.orange);
			return;
		}
		if(DataBuffer.Accounts.getItem_byName(jTextField_Accounts_Name.getText()) != null){
			jTextField_Accounts_Name.setBackground(Color.orange);
			JOptionPane.showMessageDialog(null, "Счёт с таким именем уже существует");
			return;
		}
		DataBuffer.Accounts.addItem(jTextField_Accounts_Name.getText(), d);
		if(DataBuffer.Accounts.size() == 1){
			DataBuffer.setDefaultAccountIncomingID(DataBuffer.Accounts.getItem(0).getID());
			DataBuffer.setDefaultAccountOutgoingID(DataBuffer.Accounts.getItem(0).getID());
		}
		jTextField_Accounts_Balance.setBackground(Color.white);		
		jTextField_Accounts_Name.setText("");
		jTextField_Accounts_Balance.setText("");
		ShowAccounts();
    }//GEN-LAST:event_jButton_Accounts_AddActionPerformed

    private void jButton_Accounts_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Accounts_DeleteActionPerformed
        if(jList_Accounts.getSelectedIndex() == -1)	return;
		Account_class account;
		boolean f1 = false;
		boolean f2 = false;
		
		account = DataBuffer.Accounts.getItem(jList_Accounts.getSelectedIndex());
		if(DataBuffer.Accounts.size() - 1 > 0){
			if(account.getID() == DataBuffer.getDefaultAccountIncomingID())	f1 = true;
			if(account.getID() == DataBuffer.getDefaultAccountOutgoingID())	f2 = true;
		}
		DataBuffer.Accounts.deleteItem_byID(account.getID());
		if(f1)	DataBuffer.setDefaultAccountIncomingID(DataBuffer.Accounts.getItem(0).getID());
		if(f2)	DataBuffer.setDefaultAccountOutgoingID(DataBuffer.Accounts.getItem(0).getID());
		ShowAccounts();
    }//GEN-LAST:event_jButton_Accounts_DeleteActionPerformed

    private void jCheckBox_Accounts_IncomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Accounts_IncomingActionPerformed
        if(jList_Accounts.getSelectedIndex() == -1){
			jCheckBox_Accounts_Incoming.setSelected(false);
			return;
		}
		if(jCheckBox_Accounts_Incoming.isSelected()){
			DataBuffer.setDefaultAccountIncomingID(DataBuffer.Accounts.getItem(jList_Accounts.getSelectedIndex()).getID());
			ShowAccounts();
		}
		else
			jCheckBox_Accounts_Incoming.setSelected(true);
    }//GEN-LAST:event_jCheckBox_Accounts_IncomingActionPerformed

    private void jCheckBox_Accounts_OutgoingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_Accounts_OutgoingActionPerformed
        if(jList_Accounts.getSelectedIndex() == -1){
			jCheckBox_Accounts_Outgoing.setSelected(false);
			return;
		}
		if(jCheckBox_Accounts_Outgoing.isSelected()){
			DataBuffer.setDefaultAccountOutgoingID(DataBuffer.Accounts.getItem(jList_Accounts.getSelectedIndex()).getID());
			ShowAccounts();
		}
		else
			jCheckBox_Accounts_Outgoing.setSelected(true);
    }//GEN-LAST:event_jCheckBox_Accounts_OutgoingActionPerformed

    private void jList_CategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_CategoriesMouseClicked
		ShowCategories();
    }//GEN-LAST:event_jList_CategoriesMouseClicked

    private void jRadioButton_Categories_IsIncomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_Categories_IsIncomingActionPerformed
        if(jRadioButton_Categories_IsIncoming.isSelected())
			jRadioButton_Categories_IsCost.setSelected(false);
		else
			jRadioButton_Categories_IsIncoming.setSelected(true);
    }//GEN-LAST:event_jRadioButton_Categories_IsIncomingActionPerformed

    private void jRadioButton_Categories_IsCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_Categories_IsCostActionPerformed
         if(jRadioButton_Categories_IsCost.isSelected())
			 jRadioButton_Categories_IsIncoming.setSelected(false);
		 else
			 jRadioButton_Categories_IsCost.setSelected(true);
    }//GEN-LAST:event_jRadioButton_Categories_IsCostActionPerformed

    private void jButton_Categories_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Categories_AddActionPerformed
        if(jTextField_Categories_Name.getText().isEmpty())
			return;
		if(DataBuffer.Categories.getItem_byName(jTextField_Categories_Name.getText()) == null){
			DataBuffer.Categories.addItem("", jTextField_Categories_Name.getText(), jRadioButton_Categories_IsIncoming.isSelected());
			jTextField_Categories_Name.setText("");
			jTextField_Categories_Name.setBackground(Color.white);
			ShowCategories();
			javax.swing.DefaultListModel model = (javax.swing.DefaultListModel) jList_Categories.getModel();
			jList_Categories.setSelectedIndex(model.getSize() - 1);
			ShowSubcategories();
		}
		else{
			jTextField_Categories_Name.setBackground(Color.orange);
			JOptionPane.showMessageDialog(null, "Категория с таким именем уже существует");
		}
    }//GEN-LAST:event_jButton_Categories_AddActionPerformed

    private void jButton_Categories_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Categories_EditActionPerformed
        if(jTextField_Categories_Name.getText().isEmpty()  || jList_Categories.getSelectedIndex() == -1)
			return;
		Category_class category = DataBuffer.Categories.getItem_byName(jList_Categories.getSelectedValue());
		if(category == null)
			jTextField_Categories_Name.setBackground(Color.orange);
		else{
			java.util.ArrayList<Category_class> list = DataBuffer.Categories.selectByParentName(category.getName());
			category.set("", jTextField_Categories_Name.getText(), jRadioButton_Categories_IsIncoming.isSelected());			
			for(int i = 0; i < list.size(); i++){
				DataBuffer.Categories.getItem_byID(list.get(i).getID()).setNameParent(category.getName());
				DataBuffer.Categories.getItem_byID(list.get(i).getID()).setIsIncoming(category.getIsIncoming());
			}
			jTextField_Categories_Name.setBackground(Color.white);
			ShowCategories();
		}				
    }//GEN-LAST:event_jButton_Categories_EditActionPerformed

    private void jButton_Categories_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Categories_DeleteActionPerformed
		if(jList_Categories.getSelectedIndex() == -1)	return;
		Category_class category = DataBuffer.Categories.getItem_byName(jList_Categories.getSelectedValue());
		java.util.ArrayList<Category_class> list = DataBuffer.Categories.selectByParentName(category.getName());
		if(DataBuffer.Categories.deleteItem_byName(jList_Categories.getSelectedValue())){
			for(int i = 0; i < list.size(); i++)
				DataBuffer.Categories.deleteItem_byID(list.get(i).getID());
			ShowCategories();
		}
    }//GEN-LAST:event_jButton_Categories_DeleteActionPerformed

    private void jButton_Subcategories_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Subcategories_AddActionPerformed
        if(jTextField_Subcategories_Name.getText().isEmpty()  ||  jList_Categories.getSelectedIndex() == -1)
			return;
		
		Category_class parent = DataBuffer.Categories.getItem_byName(jList_Categories.getSelectedValue());
		if(parent == null){
			jTextField_Subcategories_Name.setBackground(Color.orange);
			return;
		}

		Category_class category = DataBuffer.Categories.getItem_byName(jTextField_Subcategories_Name.getText(), parent.getNameParent());
		if(category != null){
			jTextField_Subcategories_Name.setBackground(Color.orange);
		}
		else{
			DataBuffer.Categories.addItem(parent.getName(), jTextField_Subcategories_Name.getText(), parent.getIsIncoming());
			jTextField_Subcategories_Name.setText("");
			jTextField_Subcategories_Name.setBackground(Color.white);
			ShowSubcategories();
			javax.swing.DefaultListModel model = (javax.swing.DefaultListModel) jList_Subcategories.getModel();
			jList_Subcategories.setSelectedIndex(model.getSize() - 1);
		}
    }//GEN-LAST:event_jButton_Subcategories_AddActionPerformed

    private void jButton_Subcategories_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Subcategories_DeleteActionPerformed
        if(jList_Subcategories.getSelectedIndex() == -1)	return;
		if(DataBuffer.Categories.deleteItem_byName(jList_Subcategories.getSelectedValue(), jList_Categories.getSelectedValue()))
			ShowSubcategories();
    }//GEN-LAST:event_jButton_Subcategories_DeleteActionPerformed

    private void jRadioButton_DefaultOperation_IsIncomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_DefaultOperation_IsIncomingActionPerformed
		if(jRadioButton_DefaultOperation_IsIncoming.isSelected())
			jRadioButton_DefaultOperation_IsCost.setSelected(false);
		else
			jRadioButton_DefaultOperation_IsIncoming.setSelected(true);
		DataBuffer.setDefaultOperationType(jRadioButton_DefaultOperation_IsIncoming.isSelected());
    }//GEN-LAST:event_jRadioButton_DefaultOperation_IsIncomingActionPerformed

    private void jRadioButton_DefaultOperation_IsCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_DefaultOperation_IsCostActionPerformed
        if(jRadioButton_DefaultOperation_IsCost.isSelected())
			jRadioButton_DefaultOperation_IsIncoming.setSelected(false);
		else
			jRadioButton_DefaultOperation_IsCost.setSelected(true);
		DataBuffer.setDefaultOperationType(jRadioButton_DefaultOperation_IsIncoming.isSelected());
    }//GEN-LAST:event_jRadioButton_DefaultOperation_IsCostActionPerformed

    private void jButton_Accounts_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Accounts_EditActionPerformed
        if(jTextField_Accounts_Name.getText().isEmpty())
			return;
		Double d = Func.parseDouble(jTextField_Accounts_Balance.getText());
		if(d == null){
			jTextField_Accounts_Balance.setBackground(Color.orange);
			return;
		}
		Account_class account = DataBuffer.Accounts.getItem(jList_Accounts.getSelectedIndex());
		if(account == null)
			jTextField_Accounts_Name.setBackground(Color.orange);
		else{
			account.set(jTextField_Accounts_Name.getText(), d);
			ShowAccounts();
		}
    }//GEN-LAST:event_jButton_Accounts_EditActionPerformed

    private void jButton_Subcategories_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Subcategories_EditActionPerformed
        if(jTextField_Subcategories_Name.getText().isEmpty()  ||  jList_Subcategories.getSelectedIndex() == -1)
			return;
		Category_class category = DataBuffer.Categories.getItem_byName(jList_Subcategories.getSelectedValue(), jList_Categories.getSelectedValue());
		if(category == null)
			jTextField_Subcategories_Name.setBackground(Color.orange);
		else{
			category.setName(jTextField_Subcategories_Name.getText());
			jTextField_Subcategories_Name.setText("");
			jTextField_Subcategories_Name.setBackground(Color.white);
			ShowSubcategories();
		}
    }//GEN-LAST:event_jButton_Subcategories_EditActionPerformed

    private void jList_SubcategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_SubcategoriesMouseClicked
        ShowSubcategories();
    }//GEN-LAST:event_jList_SubcategoriesMouseClicked

    private void jButton_SQL_ApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SQL_ApplyActionPerformed
        boolean error = false;
		if(jTextField_SQL_Hostname.getText().isEmpty()){
			error = false;
			jTextField_SQL_Hostname.setBackground(Color.orange);
		}
		else
			jTextField_SQL_Hostname.setBackground(Color.white);
		
		if(jTextField_SQL_Port.getText().isEmpty()  ||  Func.parseInt(jTextField_SQL_Port.getText()) == null){
			error = false;
			jTextField_SQL_Port.setBackground(Color.orange);
		}
		else
			jTextField_SQL_Port.setBackground(Color.white);		
		
		if(jTextField_SQL_DB.getText().isEmpty()){
			error = false;
			jTextField_SQL_DB.setBackground(Color.orange);
		}
		else
			jTextField_SQL_DB.setBackground(Color.white);
		
		if(jTextField_SQL_Username.getText().isEmpty()){
			error = false;
			jTextField_SQL_Username.setBackground(Color.orange);
		}
		else
			jTextField_SQL_Username.setBackground(Color.white);
		
		if(!error){
			DataBuffer.setSQL_Host(jTextField_SQL_Hostname.getText());
			DataBuffer.setSQL_Port(Integer.parseInt(jTextField_SQL_Port.getText()));
			DataBuffer.setSQL_DB(jTextField_SQL_DB.getText());
			DataBuffer.setSQL_User(jTextField_SQL_Username.getText());
			DataBuffer.setSQL_Password(new String(jPasswordField_SQL_Password.getPassword()));
			HibernateUtil.Close();
			if(!frmMainInterface.InitHibernate(DataBuffer)){
				jTextField_SQL_Hostname.setBackground(Color.orange);
				jTextField_SQL_Port.setBackground(Color.orange);
				jTextField_SQL_DB.setBackground(Color.orange);
				jTextField_SQL_Username.setBackground(Color.orange);
				System.err.println("ERROR: С данными параметрами невозможно установить соединение с базой данных!");
				JOptionPane.showMessageDialog(null, "ERROR: С данными параметрами невозможно установить соединение с базой данных!");
			}
			else{
				jTextField_SQL_Hostname.setBackground(Color.white);
				jTextField_SQL_Port.setBackground(Color.white);
				jTextField_SQL_DB.setBackground(Color.white);
				jTextField_SQL_Username.setBackground(Color.white);
			}
		}
    }//GEN-LAST:event_jButton_SQL_ApplyActionPerformed

    private void jButton_SQL_ReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SQL_ReturnActionPerformed
        DataBuffer.setSQL_Host(Data.getSQL_Host());
		DataBuffer.setSQL_Port(Data.getSQL_Port());
		DataBuffer.setSQL_DB(Data.getSQL_DB());
		DataBuffer.setSQL_User(Data.getSQL_User());
		DataBuffer.setSQL_Password(Data.getSQL_Password());
		ShowSQL();
    }//GEN-LAST:event_jButton_SQL_ReturnActionPerformed

    private void jRadioButton_StoreData_FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_StoreData_FileActionPerformed
        if(jRadioButton_StoreData_File.isSelected()){
			jRadioButton_StoreData_DB.setSelected(false);
			jRadioButton_StoreData_FileAndDb.setSelected(false);
		}			
		else
			jRadioButton_StoreData_File.setSelected(true);
		DataBuffer.setStoreDataMode(0);
    }//GEN-LAST:event_jRadioButton_StoreData_FileActionPerformed

    private void jRadioButton_StoreData_DBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_StoreData_DBActionPerformed
        if(jRadioButton_StoreData_DB.isSelected()){
			jRadioButton_StoreData_File.setSelected(false);
			jRadioButton_StoreData_FileAndDb.setSelected(false);
		}			
		else
			jRadioButton_StoreData_DB.setSelected(true);
		DataBuffer.setStoreDataMode(1);
    }//GEN-LAST:event_jRadioButton_StoreData_DBActionPerformed

    private void jRadioButton_StoreData_FileAndDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_StoreData_FileAndDbActionPerformed
        if(jRadioButton_StoreData_FileAndDb.isSelected()){
			jRadioButton_StoreData_File.setSelected(false);
			jRadioButton_StoreData_DB.setSelected(false);
		}			
		else
			jRadioButton_StoreData_FileAndDb.setSelected(true);
		DataBuffer.setStoreDataMode(2);
    }//GEN-LAST:event_jRadioButton_StoreData_FileAndDbActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(frmSettings_class.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(frmSettings_class.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(frmSettings_class.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(frmSettings_class.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new frmSettings_class().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Accounts_Add;
    private javax.swing.JButton jButton_Accounts_Delete;
    private javax.swing.JButton jButton_Accounts_Edit;
    private javax.swing.JButton jButton_Cancel;
    private javax.swing.JButton jButton_Categories_Add;
    private javax.swing.JButton jButton_Categories_Delete;
    private javax.swing.JButton jButton_Categories_Edit;
    private javax.swing.JButton jButton_OK;
    private javax.swing.JButton jButton_SQL_Apply;
    private javax.swing.JButton jButton_SQL_Return;
    private javax.swing.JButton jButton_Subcategories_Add;
    private javax.swing.JButton jButton_Subcategories_Delete;
    private javax.swing.JButton jButton_Subcategories_Edit;
    private javax.swing.JCheckBox jCheckBox_Accounts_Incoming;
    private javax.swing.JCheckBox jCheckBox_Accounts_Outgoing;
    private javax.swing.JLabel jLabel_Accounts;
    private javax.swing.JLabel jLabel_Accounts_Balance;
    private javax.swing.JLabel jLabel_Accounts_Default;
    private javax.swing.JLabel jLabel_Accounts_Name;
    private javax.swing.JLabel jLabel_Categories;
    private javax.swing.JLabel jLabel_DefaultOperationType;
    private javax.swing.JLabel jLabel_SQL;
    private javax.swing.JLabel jLabel_SQL_DB;
    private javax.swing.JLabel jLabel_SQL_Hostname;
    private javax.swing.JLabel jLabel_SQL_Password;
    private javax.swing.JLabel jLabel_SQL_Port;
    private javax.swing.JLabel jLabel_SQL_Username;
    private javax.swing.JLabel jLabel_StoreData;
    private javax.swing.JLabel jLabel_Subcategories;
    private javax.swing.JList<String> jList_Accounts;
    private javax.swing.JList<String> jList_Categories;
    private javax.swing.JList<String> jList_Subcategories;
    private javax.swing.JPasswordField jPasswordField_SQL_Password;
    private javax.swing.JRadioButton jRadioButton_Categories_IsCost;
    private javax.swing.JRadioButton jRadioButton_Categories_IsIncoming;
    private javax.swing.JRadioButton jRadioButton_DefaultOperation_IsCost;
    private javax.swing.JRadioButton jRadioButton_DefaultOperation_IsIncoming;
    private javax.swing.JRadioButton jRadioButton_StoreData_DB;
    private javax.swing.JRadioButton jRadioButton_StoreData_File;
    private javax.swing.JRadioButton jRadioButton_StoreData_FileAndDb;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField_Accounts_Balance;
    private javax.swing.JTextField jTextField_Accounts_Name;
    private javax.swing.JTextField jTextField_Categories_Name;
    private javax.swing.JTextField jTextField_SQL_DB;
    private javax.swing.JTextField jTextField_SQL_Hostname;
    private javax.swing.JTextField jTextField_SQL_Port;
    private javax.swing.JTextField jTextField_SQL_Username;
    private javax.swing.JTextField jTextField_Subcategories_Name;
    // End of variables declaration//GEN-END:variables

	private javax.swing.JFrame frmMain;
	private IfrmMain frmMainInterface;
	private Data_class Data;
	private Data_class DataBuffer;
	private HibernateUtil_class HibernateUtil;
	
	private void Init(){
		DataBuffer = new Data_class();
		SetKeyBindings();
		jTextField_Accounts_Name.setBackground(Color.white);
		jTextField_Accounts_Balance.setBackground(Color.white);
		jTextField_Categories_Name.setBackground(Color.white);
		jTextField_Subcategories_Name.setBackground(Color.white);
	}
	
	public void showForm(){
		if(this.isVisible())
			return;
		
		DataBuffer.copyWithoutOperations(Data);
		ShowAccounts();
		ShowCategories();
		ShowSQL();
		if(DataBuffer.getDefaultOperationType())
			jRadioButton_DefaultOperation_IsIncoming.doClick();
		else
			jRadioButton_DefaultOperation_IsCost.doClick();
		
		switch(DataBuffer.getStoreDataMode()){
			case 0:
				jRadioButton_StoreData_File.doClick();
				break;
			case 1:
				jRadioButton_StoreData_DB.doClick();
				break;
			case 2:
				jRadioButton_StoreData_FileAndDb.doClick();
				break;
		}
		
		this.setVisible(true);
        frmMain.setEnabled(false);
	}
	
	private void SetKeyBindings(){
		javax.swing.InputMap inputMap = getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW);
		javax.swing.ActionMap actionMap = getRootPane().getActionMap();
		inputMap.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0, false), "Pressed.ESC");
		//inputMap.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0, false), "Pressed.ENTER");

		actionMap.put("Pressed.ESC", new javax.swing.AbstractAction() {
			@Override public void actionPerformed(java.awt.event.ActionEvent e) {
				DoExit(false);
			}
		});	
	}
	
	private void DoExit(boolean save){
		if(!save){
			frmMain.setEnabled(true);
			this.setVisible(false);
		}
		else
		{
			boolean changeStoreModeToDb = false;	//	Режим хранения изменился с файла на 1) БД или 2) БД + Файл
			if(Data.getStoreDataMode() == 0  &&  DataBuffer.getStoreDataMode() > 0)
				changeStoreModeToDb = true;
			Data.copyWithoutOperations(DataBuffer);
			frmMainInterface.SaveConfigToFile(Data.getAppFolder() + "Config.ini");
			if(Data.getStoreDataMode() > 0)
				if(HibernateUtil.getSessionFactory() == null){
					if(!frmMainInterface.InitHibernate()){
						System.err.println("Ошибка инициализации HibernateUtil. Введите корректные параметры подключения к БД");
						JOptionPane.showMessageDialog(null, "Ошибка инициализации HibernateUtil. Введите корректные параметры подключения к БД");
						return;
					}				
				}
			if(changeStoreModeToDb){
				List accounts = HibernateUtil.getAccountsAll();
				List categories = HibernateUtil.getCategoriesAll();
				List operations = HibernateUtil.getOperationsAll();
				if(Data.Accounts.equals(accounts) == false ||
					Data.Categories.equals(categories) == false ||
					Data.Operations.equals(operations) == false
				){
					int answer;					
					if(accounts.size() == 0  &&  categories.size() == 0  &&  operations.size() == 0)
						answer = 0;
					else{
						Object[] options = { "Заменть данные в БД текущими данными", "Стереть текущие данные и загрузить из БД", "Ничего не делать"};
						answer = javax.swing.JOptionPane.showOptionDialog(null, "Набор данных в программе "
							+ "отличается от набора в базе данных (SQL).\nЧто делать с данными?", "Внимание",
						javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE, null, options, options[2]);
					}					
					if(answer == -1  ||  answer == 2)	return;
					if(answer == 0){
						if( !(accounts.size() == 0  &&  categories.size() == 0  &&  operations.size() == 0) ){
						HibernateUtil.dropTableAccounts();
						HibernateUtil.createTableAccounts();
						HibernateUtil.dropTableCategories();
						HibernateUtil.createTableCategories();
						HibernateUtil.dropTableOpearations();
						HibernateUtil.createTableOperations();
						}
						frmMainInterface.SaveDataToDB(false);
					}
					if(answer == 1){
						Data.clearData();
						Data.Accounts.addOrSet(accounts);
						Data.Categories.addOrSet(categories);
						Data.Operations.addOrSet(operations);
					}
					frmMainInterface.ShowData();
				}
			}
			else{
				if(Data.getStoreDataMode() == 0){
					HibernateUtil.Close();
					frmMainInterface.SaveDataToFile(true);
				}
				else
					frmMainInterface.SaveDataToDB(true);
			}
			frmMainInterface.ShowData();
			frmMain.setEnabled(true);
			this.setVisible(false);
		}
	}
	
	private void ShowAccounts(){
		javax.swing.DefaultListModel model = (javax.swing.DefaultListModel) jList_Accounts.getModel();
		int index = jList_Accounts.getSelectedIndex();
		model.removeAllElements();
		jCheckBox_Accounts_Incoming.setSelected(false);
		jCheckBox_Accounts_Outgoing.setSelected(false);
		Account_class account;
		String str;
		String str2;
		for(int i = 0; i < DataBuffer.Accounts.size(); i++){
			str2 = "";
			account = DataBuffer.Accounts.getItem(i);
			str = account.getName();
			if(DataBuffer.getDefaultAccountIncomingID() == account.getID())
				str2 += "П";
			
			if(DataBuffer.getDefaultAccountOutgoingID() == account.getID())
				str2 += "Р";

			if(str2.compareTo("") != 0)
				str = str + " (" + str2 + ")";
			model.addElement(str);
		}
		if(index > -1){
			jTextField_Accounts_Name.setBackground(Color.white);
			jTextField_Accounts_Balance.setBackground(Color.white);
			if(model.getSize() > 0){
				if(index >= model.getSize())
					index = model.getSize() - 1;
				account = DataBuffer.Accounts.getItem(index);
				jList_Accounts.setSelectedIndex(index);
				if(DataBuffer.getDefaultAccountIncomingID() == account.getID())
					jCheckBox_Accounts_Incoming.setSelected(true);

				if(DataBuffer.getDefaultAccountOutgoingID() == account.getID())
					jCheckBox_Accounts_Outgoing.setSelected(true);
				
				jTextField_Accounts_Name.setText(account.getName());
				jTextField_Accounts_Balance.setText(Double.toString(account.getBalance()));
			}
		}
	}
	
	private void ShowCategories(){
		javax.swing.DefaultListModel model = (javax.swing.DefaultListModel) jList_Categories.getModel();
		int index = jList_Categories.getSelectedIndex();
		java.util.ArrayList<Category_class> list = DataBuffer.Categories.selectParentCategories();
		model.removeAllElements();
		jRadioButton_Categories_IsIncoming.setSelected(false);
		jRadioButton_Categories_IsCost.setSelected(false);
		if(list != null)
			for(int i = 0; i < list.size(); i++)
				model.addElement(list.get(i).getName());
		if(index > -1){
			jTextField_Categories_Name.setBackground(Color.white);
			if(model.getSize() > 0){
				if(index >= model.getSize())
					index = model.getSize() - 1;
				jList_Categories.setSelectedIndex(index);
				Category_class category = DataBuffer.Categories.getItem_byName(model.get(index).toString());
				if(category != null){
					if(category.getIsIncoming())
						jRadioButton_Categories_IsIncoming.setSelected(true);
					else
						jRadioButton_Categories_IsCost.setSelected(true);
					jTextField_Categories_Name.setText(category.getName());
				}
			}
		}
		ShowSubcategories();
	}
	
	private void ShowSubcategories(){
		javax.swing.DefaultListModel model = (javax.swing.DefaultListModel) jList_Subcategories.getModel();
		int indexC = jList_Categories.getSelectedIndex();
		int indexS = jList_Subcategories.getSelectedIndex();
		model.removeAllElements();
		if(indexC == -1)	return;
		java.util.ArrayList<Category_class> list = DataBuffer.Categories.selectByParentName(jList_Categories.getSelectedValue());
		if(list != null)
			for(int i = 0; i < list.size(); i++)
				model.addElement(list.get(i).getName());
		jTextField_Subcategories_Name.setBackground(Color.white);
		if(list.size() <= 0)
			jTextField_Subcategories_Name.setText("");
		else{
			if(indexS > -1){
				if(indexS >= model.size())
					indexS = model.size() - 1;
					jList_Subcategories.setSelectedIndex(indexS);
					Category_class category = DataBuffer.Categories.getItem_byName(model.get(indexS).toString());
					if(category != null){
						jTextField_Subcategories_Name.setText(category.getName());
					}
			}
		}
	}
	
	private void ShowSQL(){
		jTextField_SQL_Hostname.setBackground(Color.white);
		jTextField_SQL_Port.setBackground(Color.white);
		jTextField_SQL_DB.setBackground(Color.white);
		jTextField_SQL_Username.setBackground(Color.white);
		jTextField_SQL_Hostname.setText(DataBuffer.getSQL_Host());
		jTextField_SQL_Port.setText(Integer.toString(DataBuffer.getSQL_Port()));
		jTextField_SQL_DB.setText(DataBuffer.getSQL_DB());
		jTextField_SQL_Username.setText(DataBuffer.getSQL_User());
		jPasswordField_SQL_Password.setText(DataBuffer.getSQL_Password());
	}
	
	private boolean CheckForSave(boolean testConnectionToDB){
		if(jTextField_Accounts_Name.getBackground() != Color.white)	return false;
		if(jTextField_Accounts_Balance.getBackground() != Color.white)	return false;
		if(jTextField_Categories_Name.getBackground() != Color.white)	return false;
		if(jTextField_Subcategories_Name.getBackground() != Color.white)	return false;
		
		if(testConnectionToDB)	jButton_SQL_ApplyActionPerformed(null);
		if(jTextField_SQL_Hostname.getBackground() != Color.white)	return false;
		if(jTextField_SQL_Port.getBackground() != Color.white)	return false;
		if(jTextField_SQL_DB.getBackground() != Color.white)	return false;
		if(jTextField_SQL_Username.getBackground() != Color.white)	return false;			
		return true;
	}
}