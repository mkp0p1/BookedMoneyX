package com.mycompany.bookedmoneyx.client;

import java.util.Date;
import java.util.List;
import java.io.*;
import java.util.Scanner;
import java.time.format.DateTimeFormatter;
import javax.sound.midi.SysexMessage;
import javax.swing.JOptionPane;
import com.mycompany.bookedmoneyx.client.frmSettings_class;
import com.mycompany.bookedmoneyx.client.frmOperation_class;
import com.mycompany.bookedmoneyx.client.frmAbout_class;
import com.mycompany.bookedmoneyx.client.Data_class;
import com.mycompany.bookedmoneyx.client.HibernateUtil_class;
import com.mycompany.bookedmoneyx.client.IfrmMain;
import javax.swing.JFileChooser;

public class frmMain extends javax.swing.JFrame implements IfrmMain {

    /**
     * Creates new form frmMain
     */
    public frmMain() {
        initComponents();
		Data = new Data_class();
		HibernateUtil = new HibernateUtil_class();
		frmOperation = new frmOperation_class(this, this, Data, HibernateUtil);
        frmSettings = new frmSettings_class(this, this, Data, HibernateUtil);
		frmAbout = new frmAbout_class(this);
		Init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Operations = new javax.swing.JTable();
        jComboBox_Period = new javax.swing.JComboBox<>();
        jLabel_Incomings = new javax.swing.JLabel();
        jLabel_Costs = new javax.swing.JLabel();
        jLabel_Balance = new javax.swing.JLabel();
        jLabel_Incomings_Value = new javax.swing.JLabel();
        jLabel_Costs_Value = new javax.swing.JLabel();
        jLabel_Balance_Value = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton_AddOperation = new javax.swing.JButton();
        jButton_EditOperation = new javax.swing.JButton();
        jButton_DeleteOperation = new javax.swing.JButton();
        jLabel_Period = new javax.swing.JLabel();
        jButton_PeriodPrev = new javax.swing.JButton();
        jButton_PeriodNext = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_File_Settings = new javax.swing.JMenuItem();
        jMenuItem_File_Exit = new javax.swing.JMenuItem();
        jMenu_Data = new javax.swing.JMenu();
        jMenuItem_Data_LoadFromFile = new javax.swing.JMenuItem();
        jMenuItem_Data_SaveToFile = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Data_ClearOperations = new javax.swing.JMenuItem();
        jMenuItem_Data_ClearAll = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();
        jMenuItem_Help_About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Booked money X");
        setBackground(new java.awt.Color(204, 204, 204));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable_Operations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Категория", "Подкатегория", "Описание", "Тип", "Сумма", "Счёт входящий", "Счёт исходящий", "Дата"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Operations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_Operations.setShowGrid(true);
        jTable_Operations.setShowHorizontalLines(false);
        jTable_Operations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_OperationsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Operations);
        if (jTable_Operations.getColumnModel().getColumnCount() > 0) {
            jTable_Operations.getColumnModel().getColumn(0).setMinWidth(40);
            jTable_Operations.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable_Operations.getColumnModel().getColumn(0).setMaxWidth(40);
            jTable_Operations.getColumnModel().getColumn(1).setMinWidth(110);
            jTable_Operations.getColumnModel().getColumn(1).setPreferredWidth(120);
            jTable_Operations.getColumnModel().getColumn(1).setMaxWidth(140);
            jTable_Operations.getColumnModel().getColumn(2).setMinWidth(110);
            jTable_Operations.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTable_Operations.getColumnModel().getColumn(2).setMaxWidth(140);
            jTable_Operations.getColumnModel().getColumn(4).setMinWidth(40);
            jTable_Operations.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTable_Operations.getColumnModel().getColumn(4).setMaxWidth(40);
            jTable_Operations.getColumnModel().getColumn(5).setMinWidth(80);
            jTable_Operations.getColumnModel().getColumn(5).setPreferredWidth(90);
            jTable_Operations.getColumnModel().getColumn(5).setMaxWidth(100);
            jTable_Operations.getColumnModel().getColumn(6).setMinWidth(110);
            jTable_Operations.getColumnModel().getColumn(6).setPreferredWidth(110);
            jTable_Operations.getColumnModel().getColumn(6).setMaxWidth(110);
            jTable_Operations.getColumnModel().getColumn(7).setMinWidth(110);
            jTable_Operations.getColumnModel().getColumn(7).setPreferredWidth(110);
            jTable_Operations.getColumnModel().getColumn(7).setMaxWidth(110);
            jTable_Operations.getColumnModel().getColumn(8).setMinWidth(80);
            jTable_Operations.getColumnModel().getColumn(8).setPreferredWidth(80);
            jTable_Operations.getColumnModel().getColumn(8).setMaxWidth(80);
        }

        jComboBox_Period.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "День", "Неделя", "Месяц", "Год", "Интервал", "Всё" }));
        jComboBox_Period.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_PeriodActionPerformed(evt);
            }
        });

        jLabel_Incomings.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel_Incomings.setForeground(new java.awt.Color(51, 153, 0));
        jLabel_Incomings.setText("Приход");

        jLabel_Costs.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel_Costs.setForeground(new java.awt.Color(255, 0, 0));
        jLabel_Costs.setText("Расход");

        jLabel_Balance.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel_Balance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Balance.setText("Баланс");

        jLabel_Incomings_Value.setBackground(new java.awt.Color(242, 242, 242));
        jLabel_Incomings_Value.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel_Incomings_Value.setForeground(new java.awt.Color(51, 153, 0));
        jLabel_Incomings_Value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Incomings_Value.setOpaque(true);

        jLabel_Costs_Value.setBackground(new java.awt.Color(242, 242, 242));
        jLabel_Costs_Value.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel_Costs_Value.setForeground(new java.awt.Color(255, 0, 0));
        jLabel_Costs_Value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Costs_Value.setOpaque(true);

        jLabel_Balance_Value.setBackground(new java.awt.Color(242, 242, 242));
        jLabel_Balance_Value.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel_Balance_Value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Balance_Value.setOpaque(true);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButton_AddOperation.setText("Добавить");
        jButton_AddOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddOperationActionPerformed(evt);
            }
        });

        jButton_EditOperation.setText("Изменить");
        jButton_EditOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EditOperationActionPerformed(evt);
            }
        });

        jButton_DeleteOperation.setText("Удалить");
        jButton_DeleteOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeleteOperationActionPerformed(evt);
            }
        });

        jLabel_Period.setBackground(new java.awt.Color(242, 242, 242));
        jLabel_Period.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel_Period.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Period.setOpaque(true);
        jLabel_Period.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_PeriodMouseClicked(evt);
            }
        });

        jButton_PeriodPrev.setText("<<");
        jButton_PeriodPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PeriodPrevActionPerformed(evt);
            }
        });

        jButton_PeriodNext.setText(">>");
        jButton_PeriodNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PeriodNextActionPerformed(evt);
            }
        });

        jMenu_File.setText("Файл");

        jMenuItem_File_Settings.setText("Настройки   F5");
        jMenuItem_File_Settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_File_SettingsActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_File_Settings);

        jMenuItem_File_Exit.setText("Выход");
        jMenuItem_File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_File_ExitActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_File_Exit);

        jMenuBar1.add(jMenu_File);

        jMenu_Data.setText("Данные");

        jMenuItem_Data_LoadFromFile.setText("Загрузить из файла");
        jMenuItem_Data_LoadFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Data_LoadFromFileActionPerformed(evt);
            }
        });
        jMenu_Data.add(jMenuItem_Data_LoadFromFile);

        jMenuItem_Data_SaveToFile.setText("Сохранить в файл");
        jMenuItem_Data_SaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Data_SaveToFileActionPerformed(evt);
            }
        });
        jMenu_Data.add(jMenuItem_Data_SaveToFile);
        jMenu_Data.add(jSeparator3);

        jMenuItem_Data_ClearOperations.setText("Удалить все операции");
        jMenuItem_Data_ClearOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Data_ClearOperationsActionPerformed(evt);
            }
        });
        jMenu_Data.add(jMenuItem_Data_ClearOperations);

        jMenuItem_Data_ClearAll.setText("Удалить все данные (операции, категории, счета)");
        jMenuItem_Data_ClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Data_ClearAllActionPerformed(evt);
            }
        });
        jMenu_Data.add(jMenuItem_Data_ClearAll);

        jMenuBar1.add(jMenu_Data);

        jMenu_Help.setText("Справка");

        jMenuItem_Help_About.setText("О программе");
        jMenuItem_Help_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Help_AboutActionPerformed(evt);
            }
        });
        jMenu_Help.add(jMenuItem_Help_About);

        jMenuBar1.add(jMenu_Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton_DeleteOperation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton_EditOperation))
                                    .addComponent(jButton_AddOperation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_Incomings, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel_Incomings_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_Costs, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel_Costs_Value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel_Balance, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel_Balance_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 323, Short.MAX_VALUE)
                                .addComponent(jButton_PeriodPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_PeriodNext, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel_Period, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox_Period, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel_Costs, jLabel_Incomings});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_Incomings, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_Incomings_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_Costs, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_Costs_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox_Period, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton_PeriodPrev)
                                    .addComponent(jButton_PeriodNext))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel_Period, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_Balance_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_Balance, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(15, 15, 15)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jButton_AddOperation)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_EditOperation)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_DeleteOperation)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_File_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_File_ExitActionPerformed
        DoExit();
		System.exit(0);
    }//GEN-LAST:event_jMenuItem_File_ExitActionPerformed

    private void jMenuItem_File_SettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_File_SettingsActionPerformed
        frmSettings.showForm();
    }//GEN-LAST:event_jMenuItem_File_SettingsActionPerformed

    private void jButton_AddOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddOperationActionPerformed
        frmOperation.showForm(false, 0);
    }//GEN-LAST:event_jButton_AddOperationActionPerformed

    private void jButton_EditOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EditOperationActionPerformed
        Long id;
		if(jTable_Operations.getSelectedRow() < 0  ||  jTable_Operations.getSelectedColumn() < 0)
			return;
		id = Func.parseLong(jTable_Operations.getValueAt(jTable_Operations.getSelectedRow(), 0).toString());
		if(id == null)
			return;
		int res = frmOperation.showForm(true, id);
		if(res != 0)
			System.out.println("Ошибка открытия формы редактирования Операции. Код: " + res);
    }//GEN-LAST:event_jButton_EditOperationActionPerformed

    private void jButton_DeleteOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeleteOperationActionPerformed
		Long id;
		int row = jTable_Operations.getSelectedRow();
		if(row < 0  ||  row < 0)
			return;
		id = Func.parseLong(jTable_Operations.getValueAt(row, 0).toString());
		if(id == null)
			return;
		Data.Operations.deleteItem(id);
		if(Data.getStoreDataMode() > 0)
			HibernateUtil.removeOperation(id);
		ShowData();
		if(jTable_Operations.getRowCount() > row)
			jTable_Operations.getSelectionModel().setSelectionInterval(row, row);
		else
			jTable_Operations.getSelectionModel().setSelectionInterval(jTable_Operations.getRowCount() - 1, jTable_Operations.getRowCount() - 1);
    }//GEN-LAST:event_jButton_DeleteOperationActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		DoExit();
    }//GEN-LAST:event_formWindowClosing

    private void jTable_OperationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_OperationsMouseClicked
        if(evt.getClickCount() == 2){
			Long id;
			if(jTable_Operations.getSelectedRow() < 0  ||  jTable_Operations.getSelectedColumn() < 0)
				return;
			id = Func.parseLong(jTable_Operations.getValueAt(jTable_Operations.getSelectedRow(), 0).toString());
			if(id == null)
				return;
			frmOperation.showForm(true, id);
		}
    }//GEN-LAST:event_jTable_OperationsMouseClicked

    private void jButton_PeriodPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PeriodPrevActionPerformed
		calendar.setTime(Data.getPeriodBegin());
		switch(Data.getPeriodType()){
			case DAY:
				calendar.add(java.util.Calendar.DATE, -1);
				break;
			case WEEK:
				calendar.add(java.util.Calendar.DATE, -7);
				break;
			case MONTH:
				calendar.add(java.util.Calendar.MONTH, -1);
				break;
			case YEAR:
				calendar.add(java.util.Calendar.YEAR, -1);
		}
		Data.setPeriod(Data.getPeriodType(), calendar.getTime());
		ShowData();
    }//GEN-LAST:event_jButton_PeriodPrevActionPerformed

    private void jButton_PeriodNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PeriodNextActionPerformed
		calendar.setTime(Data.getPeriodBegin());
		switch(Data.getPeriodType()){
			case DAY:
				calendar.add(java.util.Calendar.DATE, 1);
				break;
			case WEEK:
				calendar.add(java.util.Calendar.DATE, 7);
				break;
			case MONTH:
				calendar.add(java.util.Calendar.MONTH, 1);
				break;
			case YEAR:
				calendar.add(java.util.Calendar.YEAR, 1);
		}
		Data.setPeriod(Data.getPeriodType(), calendar.getTime());
		ShowData();
    }//GEN-LAST:event_jButton_PeriodNextActionPerformed

    private void jComboBox_PeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_PeriodActionPerformed
        ePeriodType	type = ePeriodType.parseCaption(jComboBox_Period.getSelectedItem().toString());
		if(type != ePeriodType.INTERVAL){
			Data.setPeriod(type, Data.getPeriodBegin());
			ShowData();
		}
		else{
			if(isInitShowInterval){
				isInitShowInterval = false;
				ShowData();
				jLabel_Period.setText(Data.getPeriodInterval());
			}
			else{
				jLabel_Period.setText("Введите интервал");
				ClearTable();
			}
		}
    }//GEN-LAST:event_jComboBox_PeriodActionPerformed

    private void jMenuItem_Data_LoadFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Data_LoadFromFileActionPerformed
        javax.swing.JFileChooser fileOpen = new javax.swing.JFileChooser();
		fileOpen.setCurrentDirectory(new java.io.File(Data.getAppFolder()));
		fileOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fileOpen.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Data files", "dat"));
		if(fileOpen.showDialog(null, "Загрзить из файла данных") == javax.swing.JFileChooser.APPROVE_OPTION){
			if(LoadDataFromFile(fileOpen.getSelectedFile().toString()) != 0)
				Data.clearData();
			else
				if(Data.getStoreDataMode() > 0){
					HibernateUtil.dropTableAccounts();
					HibernateUtil.createTableAccounts();
					HibernateUtil.dropTableCategories();
					HibernateUtil.createTableCategories();
					HibernateUtil.dropTableOpearations();
					HibernateUtil.createTableOperations();
					SaveDataToDB(false);
				}
		}
		ShowData();
    }//GEN-LAST:event_jMenuItem_Data_LoadFromFileActionPerformed

    private void jMenuItem_Data_SaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Data_SaveToFileActionPerformed
        javax.swing.JFileChooser fileSave = new javax.swing.JFileChooser();
		fileSave.setCurrentDirectory(new java.io.File(Data.getAppFolder()));
		fileSave.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fileSave.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Data files", "dat"));
		if(fileSave.showDialog(null, "Сохранить данные в файл") == javax.swing.JFileChooser.APPROVE_OPTION){
			String filePath = fileSave.getSelectedFile().toString();
			if(!fileSave.getSelectedFile().getName().endsWith(".dat"))
				filePath += ".dat";
			SaveDataToFile(filePath, false);
		}
    }//GEN-LAST:event_jMenuItem_Data_SaveToFileActionPerformed

    private void jMenuItem_Help_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Help_AboutActionPerformed
        frmAbout.setVisible(true);
		//this.setEnabled(false);
    }//GEN-LAST:event_jMenuItem_Help_AboutActionPerformed

    private void jMenuItem_Data_ClearOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Data_ClearOperationsActionPerformed
        int answer;
		Object[] options = { "Да", "Нет"};
		answer = javax.swing.JOptionPane.showOptionDialog(null, "Вы действительно хотите удалить все операции из хранилища данных?", "Внимание",
		javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE, null, options, options[1]);
		if(answer == 0){
			Data.Operations.clear();
			if(Data.getStoreDataMode() > 0){
				HibernateUtil.dropTableOpearations();
				HibernateUtil.createTableOperations();
			}
			ShowData();
		}		
    }//GEN-LAST:event_jMenuItem_Data_ClearOperationsActionPerformed

    private void jMenuItem_Data_ClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Data_ClearAllActionPerformed
        int answer;
		Object[] options = { "Да", "Нет"};
		answer = javax.swing.JOptionPane.showOptionDialog(null, "Вы действительно хотите удалить все данные (операции, категории и счета) из хранилища данных?", "Внимание",
		javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE, null, options, options[1]);
		if(answer == 0){
			Data.clearData();
			if(Data.getStoreDataMode() > 0){
				HibernateUtil.dropTableAccounts();
				HibernateUtil.createTableAccounts();
				HibernateUtil.dropTableCategories();
				HibernateUtil.createTableCategories();
				HibernateUtil.dropTableOpearations();
				HibernateUtil.createTableOperations();
			}
			ShowData();
		}
    }//GEN-LAST:event_jMenuItem_Data_ClearAllActionPerformed

    private void jLabel_PeriodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_PeriodMouseClicked
        if(jComboBox_Period.getSelectedIndex() == 4)
		{
			String str;
			Date begin;
			Date end;
			str = javax.swing.JOptionPane.showInputDialog("Введите дату начала интервала в формате ДД.ММ.ГГГГ");
			if(str != null){
				begin = Func.parseDate(str);
				if(begin == null){
					JOptionPane.showMessageDialog(null, "Дата начала интервала введена неверно!");
					return;
				}
				str = javax.swing.JOptionPane.showInputDialog("Введите дату конца интервала в формате ДД.ММ.ГГГГ");
				if(str != null){
					end = Func.parseDate(str);
					if(end == null){
						JOptionPane.showMessageDialog(null, "Дата конца интервала введена неверно!");
						return;
					}

					if(begin.after(end))
						JOptionPane.showMessageDialog(null, "Дата начала интервала не должна превышать дату конца!");
					else{
						Data.setPeriod_Interval(begin, end);
						ShowData();
						jLabel_Period.setText(Data.getPeriodInterval());
					}
				}
			}
		}
    }//GEN-LAST:event_jLabel_PeriodMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }

    private javax.swing.JFrame frame;
	public com.mycompany.bookedmoneyx.client.frmSettings_class frmSettings;
    public com.mycompany.bookedmoneyx.client.frmOperation_class frmOperation;
	public com.mycompany.bookedmoneyx.client.frmAbout_class frmAbout;
	public com.mycompany.bookedmoneyx.client.HibernateUtil_class HibernateUtil;
    public Data_class Data;
	private boolean errorReadData;		//	Были ли ошибки чтения файла данных
	private boolean isInitShowInterval;	//	Это первичное отображение интервала. Делается всего один раз (при запуске)
	private java.util.Calendar calendar;
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_AddOperation;
    private javax.swing.JButton jButton_DeleteOperation;
    private javax.swing.JButton jButton_EditOperation;
    private javax.swing.JButton jButton_PeriodNext;
    private javax.swing.JButton jButton_PeriodPrev;
    private javax.swing.JComboBox<String> jComboBox_Period;
    private javax.swing.JLabel jLabel_Balance;
    private javax.swing.JLabel jLabel_Balance_Value;
    private javax.swing.JLabel jLabel_Costs;
    private javax.swing.JLabel jLabel_Costs_Value;
    private javax.swing.JLabel jLabel_Incomings;
    private javax.swing.JLabel jLabel_Incomings_Value;
    private javax.swing.JLabel jLabel_Period;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_Data_ClearAll;
    private javax.swing.JMenuItem jMenuItem_Data_ClearOperations;
    private javax.swing.JMenuItem jMenuItem_Data_LoadFromFile;
    private javax.swing.JMenuItem jMenuItem_Data_SaveToFile;
    private javax.swing.JMenuItem jMenuItem_File_Exit;
    private javax.swing.JMenuItem jMenuItem_File_Settings;
    private javax.swing.JMenuItem jMenuItem_Help_About;
    private javax.swing.JMenu jMenu_Data;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JMenu jMenu_Help;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTable jTable_Operations;
    // End of variables declaration//GEN-END:variables
	
	@Override
	public int SaveConfigToFile(String filePath){
		try(FileWriter fwriter = new FileWriter(filePath, false))
		{
			fwriter.write(Data.toString_ConfigForFile());
			fwriter.flush();
		}
		catch(IOException ex){
			System.out.println("SaveConfigToFile() ERROR: " + ex.getMessage());
			return 1;
		}
		return 0;
	}
	
	//	withoutOperations - сохранить без операций
	private int SaveDataToFile(String filePath, boolean withoutOperations){
		try(FileWriter fwriter = new FileWriter(filePath, false))
		{
			fwriter.write(Data.toString_DataForFile(withoutOperations));
			fwriter.flush();
		}
		catch(IOException ex){
			System.out.println("SaveDataToFile() ERROR: " + ex.getMessage());
			return 1;
		}
		return 0;
	}
	
	@Override
	public int SaveDataToFile(boolean withoutOperations){
		//	(!!!) В случае ошибки чтения из файла при открытии данные записываем в отдельный файл		
		String fileName;
		int ret;
		if(errorReadData)
			fileName = Data.getAppFolder() + "data_error.dat";
		else
			fileName = Data.getAppFolder() + "data.dat";		
		ret = SaveDataToFile(fileName, withoutOperations);
		if(ret != 0){
			System.out.println("Ошибка сохранения данных в файл: " + fileName);
			return 1;
		}
		return 0;
	}
	
	//	withoutOperations - сохранить без операций
	@Override
	public int SaveDataToDB(boolean withoutOperations){
		if(!InitHibernate())
			return 1;

		for(int i = 0; i < Data.Accounts.size(); i++)
			HibernateUtil.addOrSet(Data.Accounts.getItem(i));

		for(int i = 0; i < Data.Categories.size(); i++)
			HibernateUtil.addOrSet(Data.Categories.getItem(i));

		if(!withoutOperations)
			for(int i = 0; i < Data.Operations.size(); i++)
				HibernateUtil.addOrSet(Data.Operations.getItem(i));
		return 0;
	}

	private int LoadConfigFromFile(String filePath){
		if(Func.isExistFile(filePath)){
			try(FileReader freader = new FileReader(filePath); Scanner sc = new Scanner(freader))
			{
				String line;
				int index = 0;
				while(sc.hasNextLine()){
					line = sc.nextLine();
					index = line.indexOf(": ");
					if(index > 0){
						Data.parseAndSet_configParam(line.substring(0, index), line.substring(index + 2));
					}
				}
			}
			catch(IOException ex){
				System.out.println("LoadConfigFromFile() ERROR: " + ex.getMessage());
				return 1;
			}
		}
		return 0;
	}

	public boolean LoadData(){
		if(Data.getStoreDataMode() == 0){
			errorReadData = false;
			int res;
			res = LoadDataFromFile(Data.getAppFolder() + "data.dat");
			if(res > 1){
				errorReadData = true;
				System.out.println("Ошибка загрузки данных из файла: " + Data.getAppFolder() + "data.dat");
				return false;
			}
		}
		
		if(Data.getStoreDataMode() > 0)
			if(LoadDataFromDB() != 0)
				return false;
		return true;
	}
	
	private int LoadDataFromFile(String filePath){
		if(Func.isExistFile(filePath)){
			boolean errorReadData = false;
			try(FileReader freader = new FileReader(filePath); Scanner sc = new Scanner(freader))
			{
				Data.clearData();
				String line;
				int mode = 0;	//	0 - счета, 1 - категории, 2 - операции
				Account_class account;
				Category_class category;
				Operation_class operation;
				while(sc.hasNextLine()){
					line = sc.nextLine();
					if(line.compareTo("") == 0)
						mode++;
					else{
						switch(mode){
							case 0:
								account = Account_class.parse(line);
								if(account == null){
									System.out.println("Ошибка распознования счёта: '" + line + "'");
									errorReadData = true;
									break;
								}
								else{
									Data.Accounts.addItem(account);
									account = null;
								}
								break;
							case 1:
								category = Category_class.parse(line);
								if(category == null){
									System.out.println("Ошибка распознования категории: '" + line + "'");
									errorReadData = true;
									break;
								}
								else{
									Data.Categories.addItem(category);
									category = null;
								}
								break;
							case 2:
								operation = Operation_class.parse(line);
								if(operation == null){
									System.out.println("Ошибка распознования операции: '" + line + "'");
									errorReadData = true;
									break;
								}
								else{
									Data.Operations.addItem_byLastID(operation);
									operation = null;
								}
								break;
						}
					}
									
				}
			}
			catch(IOException ex){
				System.out.println("LoadDataFromFile() ERROR: " + ex.getMessage());
				errorReadData = true;
			}
			if(errorReadData)
				return 2;
		}
		else
			return 1;
		return 0;
	}
	
	@Override
	public int LoadDataFromDB(){
		if(!InitHibernate())
			return 1;
		java.util.List list;
		Data.clearData();
		list = HibernateUtil.getAccountsAll();
		Data.Accounts.addOrSet(list);
		list = HibernateUtil.getCategoriesAll();
		Data.Categories.addOrSet(list);
		list = HibernateUtil.getOperationsAll();
		Data.Operations.addOrSet(list);
		return 0;
	}
	
	private void DoExit(){
		int res = 0;	
		res = SaveConfigToFile(Data.getAppFolder() + "Config.ini");
		if(res != 0){
			System.out.println("Ошибка сохранения конфигурации");
			JOptionPane.showMessageDialog(null, "Ошибка сохранения конфигурации");
		}
		res = 0;
		switch(Data.getStoreDataMode()){
			case 0:
				res = SaveDataToFile(false);
				break;
			case 1:
				res = SaveDataToDB(false);
				break;
			case 2:
				res = SaveDataToFile(false);
				res = SaveDataToDB(false);
				break;
		}
		if(res != 0){
			System.out.println("Ошибка сохранения данных");
			JOptionPane.showMessageDialog(null, "Ошибка сохранения данных");
		}
	}
	
	@Override
	public void ShowData(){
		if(Data.getPeriodType() == ePeriodType.ALL)
			jLabel_Period.setText("");
		else
			if(Data.getPeriodType() != ePeriodType.INTERVAL)
				jLabel_Period.setText(Data.getPeriodInterval());
		java.util.ArrayList<Operation_class> list = Data.getOperationsByPeriod();
		double incomings = 0;
		double costs = 0;
		if(list == null)
			ClearTable();
		else{
			ShowTable(list);
			for(Operation_class item : list){
				if(item.getType() == 0){
					if(item.getIsIncoming())
						incomings += item.getAmount();
					else
						costs += item.getAmount();
				}
			}
		}
		java.text.DecimalFormat df = new java.text.DecimalFormat("###,###.##");
		jLabel_Incomings_Value.setText(df.format(incomings));
		jLabel_Costs_Value.setText(df.format(costs));
		jLabel_Balance_Value.setText(df.format(incomings - costs));
	}
	
	@Override
	public boolean InitHibernate(){
		if(HibernateUtil.getSessionFactory() == null)
			if(!HibernateUtil.Init(Data.getSQL_Host(), Data.getSQL_Port(), Data.getSQL_DB(), Data.getSQL_User(), Data.getSQL_Password(), "?createDatabaseIfNotExist=true"))
				return false;
		return true;
	}
	
	@Override
	public boolean InitHibernate(Data_class data){
		if(data == null)
			return false;
		if(HibernateUtil.getSessionFactory() == null)
			if(!HibernateUtil.Init(data.getSQL_Host(), data.getSQL_Port(), data.getSQL_DB(), data.getSQL_User(), data.getSQL_Password(), "?createDatabaseIfNotExist=true"))
				return false;
		return true;
	}
			
	public boolean Init(){
		//	Загрузка конфигурации и данных		
		Data.clearConfig();
		Data.clearData();
		int res = 0;
		calendar = new java.util.GregorianCalendar();
		calendar.setTimeInMillis(new Date().getTime());
		calendar.setFirstDayOfWeek(java.util.Calendar.MONDAY);
		
		//		Определить путь к папке с исполняющим файлом
		String appFolder = Func.getFolderFromPathOfFile2(Func.getFileNameApplication());
		Data.setAppFolder(appFolder);
		
		//		Загрузка конфигурации (если файл config.ini присутствует рядом с исполняемым файлом)
		res = LoadConfigFromFile(appFolder + "config.ini");
		if(res != 0)
			System.out.println("!!!\tОшибка загрузки конфигурациии з файла: " + Data.getAppFolder() + "config.ini");
		LoadData();
		//	END: Загрузка конфигурации и данных
		
		//	Инициализация GUI
		HeaderRenderer hr = new HeaderRenderer(jTable_Operations, javax.swing.SwingConstants.CENTER);
		jTable_Operations.getTableHeader().setDefaultRenderer(hr);
		CustomRenderer cr = new CustomRenderer();
		cr.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		cr.setVerticalAlignment(javax.swing.SwingConstants.CENTER);
		jTable_Operations.getColumnModel().getColumn(0).setCellRenderer(cr);
		jTable_Operations.getColumnModel().getColumn(1).setCellRenderer(cr);
		jTable_Operations.getColumnModel().getColumn(2).setCellRenderer(cr);
		jTable_Operations.getColumnModel().getColumn(3).setCellRenderer(cr);
		jTable_Operations.getColumnModel().getColumn(4).setCellRenderer(cr);
		jTable_Operations.getColumnModel().getColumn(5).setCellRenderer(cr);
		jTable_Operations.getColumnModel().getColumn(6).setCellRenderer(cr);
		jTable_Operations.getColumnModel().getColumn(7).setCellRenderer(cr);		
		SetKeyBindings();		
		this.setFocusable(true);
		isInitShowInterval = true;
		jComboBox_Period.setSelectedIndex(Data.getPeriodType().ordinal());
		return true;
	}

	private void ClearTable(){
		javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel)jTable_Operations.getModel();
		int n = model.getRowCount();
		for(int i = 0; i < n; i++)
			model.removeRow(0);
	}
	
	private void ShowTableRow(int row, Operation_class operation){
		if(operation == null  ||  row >= jTable_Operations.getRowCount())
			return;
		
		jTable_Operations.setValueAt(operation.getID(), row, 0);
		Category_class category = Data.Categories.getItem_byID(operation.getCategoryID());
		if(category != null){
			if(category.isParent()){
				jTable_Operations.setValueAt(category.getName(), row, 1);
				jTable_Operations.setValueAt("", row, 2);
			}
			else{
				jTable_Operations.setValueAt(category.getNameParent(), row, 1);
				jTable_Operations.setValueAt(category.getName(), row, 2);
			}
		}
		else
			if(operation.getType() == 0){
				System.out.println("ShowTableRow():\tКатегория не найдена. ID: " + operation.getCategoryID());
				jTable_Operations.setValueAt("<?????>", row, 1);
				jTable_Operations.setValueAt("<?????>", row, 2);
			}

		jTable_Operations.setValueAt(operation.getDescription(), row, 3);
		if(operation.getType() == 0){
			if(operation.getIsIncoming())
				jTable_Operations.setValueAt("+", row, 4);
			else
				jTable_Operations.setValueAt("-", row, 4);
		}
		else
			if(operation.getType() == 1)
				jTable_Operations.setValueAt("<>", row, 4);
			else
				jTable_Operations.setValueAt("?", row, 4);
		
		jTable_Operations.setValueAt(Func.roundStr(operation.getAmount(), 2), row, 5);

		Account_class account;
		if(operation.getType() == 0){
			if(operation.getIsIncoming()){
				account = Data.Accounts.getItem_byID(operation.getAccountIncomingID());
				if(account != null)	jTable_Operations.setValueAt(account.getName(), row, 6);
			}
			else{
				account = Data.Accounts.getItem_byID(operation.getAccountOutgoingID());
				if(account != null)	jTable_Operations.setValueAt(account.getName(), row, 7);
			}
		}
		else
			if(operation.getType() == 1){
				account = Data.Accounts.getItem_byID(operation.getAccountIncomingID());
				if(account != null)	jTable_Operations.setValueAt(account.getName(), row, 6);
				account = Data.Accounts.getItem_byID(operation.getAccountOutgoingID());
				if(account != null)	jTable_Operations.setValueAt(account.getName(), row, 7);
			}
		//jTable_Operations.setValueAt(Func.toString_DateTime(operation.getDateTime()), row, 8);
		jTable_Operations.setValueAt(Func.toString_Date(operation.getDateTime()), row, 8);
	}
	
	private void ShowTable(java.util.ArrayList<Operation_class> list){
		ClearTable();
		javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel)jTable_Operations.getModel();
		for(int i = 0; i < list.size(); i++){
			model.insertRow(i, new Object[] {"", "", "", "", "", "", "", "", ""});
			ShowTableRow(i, list.get(i));
		}
	}
	
	//	Класс для вырвания в ячейках талбицы
	class CustomRenderer extends javax.swing.table.DefaultTableCellRenderer
	{
		public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			java.awt.Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
			return c;
		}
	}
	
	//	Класс для вырвания в ячейках заголовка талбицы
	private static class HeaderRenderer implements javax.swing.table.TableCellRenderer {
	  javax.swing.table.DefaultTableCellRenderer renderer;
	  int horAlignment;
	  
	  public HeaderRenderer(javax.swing.JTable table, int horizontalAlignment) {
		horAlignment = horizontalAlignment;
		renderer = (javax.swing.table.DefaultTableCellRenderer)table.getTableHeader().getDefaultRenderer();
	  }
	  public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
		  boolean isSelected, boolean hasFocus, int row, int col) {
		java.awt.Component c = renderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
		javax.swing.JLabel label = (javax.swing.JLabel)c;
		label.setHorizontalAlignment(horAlignment);
		return c;
	  }
	}
	
	private void SetKeyBindings(){
		javax.swing.InputMap inputMap_main = getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW);
		javax.swing.ActionMap actionMap_main = getRootPane().getActionMap();
		javax.swing.InputMap inputMap_table = jTable_Operations.getInputMap(javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		javax.swing.ActionMap actionMap_table = jTable_Operations.getActionMap();
		
		inputMap_main.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0, false), "Pressed.ESC");
		inputMap_main.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0, false), "Pressed.F2");
		inputMap_main.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0, false), "Pressed.F5");		
		inputMap_table.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0, false), "Pressed.ESC");
		inputMap_table.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0, false), "Pressed.F2");
		inputMap_table.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0, false), "Pressed.F5");
		
		javax.swing.AbstractAction action_ESC = new javax.swing.AbstractAction() {
			@Override public void actionPerformed(java.awt.event.ActionEvent e) {
				DoExit();
				System.exit(0);
			}
		};
		
		javax.swing.AbstractAction action_F2 = new javax.swing.AbstractAction() {
			@Override public void actionPerformed(java.awt.event.ActionEvent e) {
				frmOperation.showForm(false, 0);
			}
		};
		
		javax.swing.AbstractAction action_F5 = new javax.swing.AbstractAction() {
			@Override public void actionPerformed(java.awt.event.ActionEvent e) {
				frmSettings.showForm();
			}
		};

		actionMap_main.put("Pressed.ESC", action_ESC);
		actionMap_main.put("Pressed.F2", action_F2);
		actionMap_main.put("Pressed.F5", action_F5);		
		actionMap_table.put("Pressed.ESC", action_ESC);
		actionMap_table.put("Pressed.F2", action_F2);		
		actionMap_table.put("Pressed.F5", action_F5);
	}
}
